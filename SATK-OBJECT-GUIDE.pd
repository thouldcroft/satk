#N canvas 127 38 1138 908 12;
#X obj 9 9 cnv 15 1097 42 empty empty SOUND\ ART\ TOOLKIT\ MODULE\ GUIDE 20 24 0 38 #dfdfdf #404040 0;
#X obj 9 90 cnv 8 1100 8 empty empty Input\ Signals 20 24 0 24 #e0e0e0 #404040 0;
#X obj 9 1066 cnv 8 1100 8 empty empty Signal\ Processors 20 24 0 24 #e0e0e0 #404040 0;
#X obj 9 3291 cnv 8 1100 8 empty empty Utilities 20 24 0 24 #e0e0e0 #404040 0;
#X text 1105 4086 _;
#X obj 310 1184 satk.sigproc.delay~;
#A saved 0 0 0 0 0 0 0;
#X obj 283 3748 satk.util.audioout~;
#X text 22 3900 satk.util.record~;
#X obj 795 3417 satk.util.scope~;
#X obj 59 1927 satk.seq.gesture;
#A saved 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X text 159 2246 satk.seq.gesture;
#X text 280 3901 satk.util.audioOut~;
#X text 49 1339 satk.sigproc.mmfilt~;
#X text 310 1341 satk.sigproc.delay~;
#X text 414 510 satk.util.audiofile~;
#X text 194 3714 satk.util.spectrograph~;
#X text 845 3642 satk.util.scope~;
#X obj 30 216 satk.util.audioin~;
#X obj 31 202 cnv 5 1000 2 empty empty External\ Input\ and\ Soundfile\ Playback 0 -6 0 14 #dfdfdf #404040 0;
#X text 28 143 Sound experiments need to start with \, well \, sound! That sound typically comes from one of 3 places - live microphone input (or input from another piece of software) \, the playback of a pre-recorded sound as a sound file \, or synthesized sound., f 151;
#X text 28 373 satk.util.audioIn~;
#X obj 31 592 cnv 5 1000 2 empty empty Sound\ Synthesizers 0 -6 0 14 #dfdfdf #404040 0;
#X obj 9 1621 cnv 8 1100 8 empty empty Parameter\ Control\ -\ Sequencing\ and\ Modulation 20 24 0 24 #e0e0e0 #404040 0;
#X text 1 1128 A common approach to developing interesting sounds is to process that sound in some capacity. This ranges rom creating echo (delay) or modifying the spectrum (Multi-Mode Filter) \, to adjusting the volume (Channel Strip). While these options are relatively standard tools in a sound studio or software \, the modules can be combined and creatively routed here to produce more experimental results!, f 153;
#X text 31 1656 Some interesting results can be produced \, when the parameters of the modules are changed as the sounds are heard. This can range from adjusting the volume of a signal while it plays (i.e. fading) \, to adjusting delay time. With so many so many parameters \, actively shaping the sounds is difficult when you only have 1 mouse cursor to control the parameters. Fortunately \, all parameter modules in the SATK can be externally controlled. You can control a single parameter with the ADSR module \, you can control multiple modules with the Gesture module \, and you can sequence a series of module parameters using the Sequence module., f 153;
#X text 23 3341 Sometimes you need tools that \, while they may not significantly change the sound you are producing \, can be extremely helpful in developing your sounds. Spectrograph and Oscilloscopes help you see the spectral and waveform aspects of your sound \, the Sound Recorder allows you to document your sounds \, and the Audio Output module sends audio out to your soundcard and speakers., f 153;
#X obj 379 1927 satk.seq.stepsequencer;
#X obj 259 208 satk.util.audioFile~;
#X obj 44 610 satk.synth.1oscil~;
#A saved 0 4 261.626 0 0 0 0 0;
#X obj 51 1184 satk.sigproc.mmfilt~;
#X obj 21 3747 satk.util.recorder~;
#X text 679 2262 satk.seq.stepSequencer;
#X obj 714 3694 satk.util.channelstripMn~;
#X obj 906 3697 satk.util.channelstripSt~;
#X text 659 4001 satk.util.channelstripMn~, f 27;
#X text 883 4001 satk.util.channelstripSt~, f 27;
#X text 17 57 (c) 2024 Travis Houldcroft / thouldcroft@gmail.com / houldcroftt@easternct.edu / travishouldcroft.com, f 105;
#X obj 26 3412 satk.util.spectrum~;
#X obj 769 269 satk.util.audioFileSm~;
#A saved 0 0 0 100  0 1 1;
#X text 844 424 satk.util.audioFileSm~;
#X obj 559 1179 satk.sigproc.rev3~;
#X obj 49 1819 cnv 8 1061 9 empty empty Sequencing 20 24 0 18 #e0e0e0 #404040 0;
#X text 69 1856 Sequencing involves specifying parameter values or the change of paramter values at specific time points. The GESTURE module will produce a sequence of control value ramps \, and multiple modules can be changed together to produce larger sequences. The SEQUENCE module is a traditional step sequencer found in modular synthesis \, where each step outputs a value \, with a total of 3 values total at each step., f 147;
#X obj 49 2319 cnv 8 1061 9 empty empty Modulation 20 24 0 18 #e0e0e0 #404040 0;
#X text 69 2356 Modulation involves the changing of parameters with signal based module - using a signal to change parameters of another signal module. ENVELOPE modules produce an audio-rate ramp up and then down. LFO modules (which stands for LOW FREQUENCY OSCILLATOR) are modules whose oscillators send out a stream of changing values at a slower rate than regular oscillators. LFO are particularly useful when connected to the FM and AM inlets of the OSCILLATOR module., f 147;
#X obj 99 2437 satk.util.adsr~;
#A saved 0 0 0 0 0 0;
#X obj 369 2437 satk.synth.lfoscil~;
#A saved 0 0 1 0 0 0 0 0 0;
#X obj 9 2791 cnv 8 1100 8 empty empty Data\ and\ Data\ Generation 20 24 0 24 #e0e0e0 #404040 0;
#X text 31 2826 Data can be a very powerful source for signal generation and parameter control. The benefit of using data like this is that it frees the creator up from having to generate all the control data theirselves \, they can use the data to generate it for them., f 153;
#X obj 29 2887 satk.util.dataTable;
#X obj 469 2887 satk.math.probabilityTable;
#A saved 0 0 0 0;
#X obj 713 2895 satk.math.randomDistributions;
#A saved 0 0 0 10 0 0;
#X text 20 70 Ver 0.7;
#X obj 204 207 cnv 2 2 380 empty empty empty 20 12 0 12 #dfdfdf #404040 0;
#X text 22 403 A module to get microphone or line-in input from the first two channels of your computer's sound card., f 19;
#X text 297 542 Two modules \, one full sized \, one compact \, to play back pre-recorded audio files from disk. The small module was designed with sampler-style use in mind. These modules can even load non-audio files in "Raw" mode \, allowing you to sonify/data bend non-audio files., f 103;
#X text 59 919 satk.synth.1oscil~;
#X text 42 946 A fully-featured single-voiced oscillator \, whose controls/features are based on those available on the Moog MiniMoog \, one of the most widely used and revered synthsizers in history., f 29;
#X obj 261 605 cnv 2 2 420 empty empty empty 20 12 0 12 #dfdfdf #404040 0;
#X obj 276 1195 cnv 2 2 280 empty empty empty 20 12 0 12 #dfdfdf #404040 0;
#X obj 536 1195 cnv 2 2 280 empty empty empty 20 12 0 12 #dfdfdf #404040 0;
#X text 33 1369 A module that filters out spectral frequency components of a hamonically rich signal. Will filter out high frequencies (Low-pass mode) \, filter out low frequencies (high-pass mode) \, or filter out frequencies outside a frequency band (band-pass mode)., f 32;
#X text 286 1371 A module that creates a copy of the input signal and then plays it back after a specified delay time. Can produce an "echo" effect. Feedback control will determine the number of repeats of the copied signal is heard., f 33;
#X text 554 1370 An artificial reverb \, creating a sense of space/size of the room the sound is being played in., f 32;
#X obj 818 1173 satk.sigproc.granulate~;
#A saved 0 0 0 0 0 0 0 0 0 0 0 -1 1 0 0;
#X obj 806 1195 cnv 2 2 280 empty empty empty 20 12 0 12 #dfdfdf #404040 0;
#X text 829 1488 A module that employs a form of GRANULAR SYNTHESIS \, which is an approach to sound synthesis that creates sound by playing back/creating small sound snippets of sound called grains. This module takes its input and then decomposes the signal into small grains \, with controls over the individual grains., f 43;
